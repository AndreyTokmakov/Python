
import numpy as np
import matplotlib
import matplotlib.pyplot as plt

def Test1():
    x = np.array([0.0, 1.0, 2.0, 3.0,  4.0,  5.0])
    y = np.array([0.0, 0.8, 0.9, 0.1, -0.8, -1.0])

    z = np.polyfit(x, y, 3)
    p = np.poly1d(z)

    p30 = np.poly1d(np.polyfit(x, y, 30))
    xp = np.linspace(-2, 6, 100)


    plt.plot(x, y, '.', xp, p(xp), '-', xp, p30(xp), '--')
    plt.ylim(-2,2)
    plt.show()

def Test2():
    data = [[0.16888549099999922, 7.127084528823611], [0.16888549199999922, 6.993992044491425],
            [0.16888549299999922, 6.866362061761786], [0.16888549399999922, 6.744197905413327],
            [0.16888549499999922, 6.627501951010496], [0.16888549599999922, 6.516275651493945],
            [0.16888549699999922, 6.41051952560987], [0.16888549799999922, 6.310233194927246],
            [0.16888549899999922, 6.215415356951307], [0.16888549999999922, 6.1260638293986895],
            [0.16888550099999922, 6.042175535068139], [0.16888550199999922, 5.963746518271748],
            [0.16888550299999922, 5.890771966813277], [0.16888550399999921, 5.823246197254835],
            [0.16888550499999921, 5.761162692791979], [0.1688855059999992, 5.704514090084273],
            [0.1688855069999992, 5.653292206179698], [0.1688855079999992, 5.6074880385927806],
            [0.1688855089999992, 5.567091780688852], [0.1688855099999992, 5.532092833944616],
            [0.1688855109999992, 5.502479813247546], [0.1688855119999992, 5.4782405647173915],
            [0.1688855129999992, 5.459362171880384], [0.1688855139999992, 5.4458309690410776],
            [0.1688855149999992, 5.437632552360041], [0.1688855159999992, 5.434751791325787],
            [0.1688855169999992, 5.43717284006055], [0.1688855179999992, 5.444879149278103],
            [0.1688855189999992, 5.457853477721287], [0.1688855199999992, 5.47607790389057],
            [0.1688855209999992, 5.4995338388052435], [0.1688855219999992, 5.52820203573491],
            [0.1688855229999992, 5.562062602591132], [0.1688855239999992, 5.601095018180885],
            [0.1688855249999992, 5.645278137030775], [0.1688855259999992, 5.694590207075108],
            [0.1688855269999992, 5.7490088760994285], [0.1688855279999992, 5.808511211230821],
            [0.1688855289999992, 5.873073702228439], [0.1688855299999992, 5.942672282488598],
            [0.1688855309999992, 6.017282332411738], [0.1688855319999992, 6.096878700665825],
            [0.1688855329999992, 6.1814357028181135], [0.1688855339999992, 6.27092714427376],
            [0.1688855349999992, 6.365326333275836], [0.1688855359999992, 6.464606084709255],
            [0.1688855369999992, 6.56873873137477], [0.1688855379999992, 6.677696151240223],
            [0.1688855389999992, 6.791449748897025], [0.1688855399999992, 6.909970506323868]]


    matplotlib.use('TkAgg')

    x, y = map(np.array, zip(*data))
    x_normalized = (x - x.mean())/x.std()
    fit_normalized = np.polyfit(x_normalized, y, 2)

    f = np.poly1d(fit_normalized)
    plt.scatter(x, y, marker='o', c='red')
    plt.plot(x, f(x_normalized), c='black')
    plt.xlim(0.16888549099999922 - 0.000000001, 0.1688855399999992 + 0.000000001)
    plt.show()


def Test3():
    x = [10, 30, 50, 80, 100]
    y = [30, 45, 40, 20,  40]

    for x1, y1 in zip(x, y):
        plt.plot(x1, y1, 'ro')

    z = np.polyfit(x, y, 3)
    f = np.poly1d(z)

    for x1 in np.linspace(0, 110, 110):
        plt.plot(x1, f(x1), 'b+')

    plt.axis([0, 110, 0, 60])
    plt.show()


def Test4():
    # Preparing the data to be computed and plotted
    dt = np.array([
        [0.5, 0.28],
        [0.5, 0.29],
        [0.5, 0.33],
        [0.7, 0.21],
        [0.7, 0.23],
        [0.7, 0.26],
        [0.8, 0.24],
        [0.8, 0.25],
        [0.8, 0.29],
        [0.9, 0.28],
        [0.9, 0.30],
        [0.9, 0.31],
        [1.0, 0.30],
        [1.0, 0.33],
        [1.0, 0.35]
    ])

    # Preparing X and y from the given data
    X = dt[:, 0]
    y = dt[:, 1]

    # Calculating parameters (theta0, theta1 and theta2)
    # of the 2nd degree curve using the numpy.polyfit() function
    theta = np.polyfit(X, y, 2)

    print(f'The parameters of the curve: {theta}')

    # Now, calculating the y-axis values against x-values according to
    # the parameters theta0, theta1 and theta2
    y_line = theta[2] + theta[1] * pow(X, 1) + theta[0] * pow(X, 2)

    # Plotting the data points and the best fit 2nd degree curve
    plt.scatter(X, y)
    plt.plot(X, y_line, 'r')
    plt.title('2nd degree best fit curve using numpy.polyfit()')
    plt.xlabel('x-axis')
    plt.ylabel('y-axis')
    plt.show()


def Parabola():
    x = [-10, -9.5, 0, 9.5, 10]
    y = [0, 5, 20, 5,  0]

    for x1, y1 in zip(x, y):
        plt.plot(x1, y1, 'ro')

    z = np.polyfit(x, y, 3)
    f = np.poly1d(z)

    for x1 in np.linspace(-10, 10, 21):
        plt.plot(x1, f(x1), 'b+')

    plt.axis([-15, 15, 0, 30])
    plt.show()


if __name__ == '__main__':
    # Test1()
    # Test2()
    # Test3()
    # Test4()

    Parabola();